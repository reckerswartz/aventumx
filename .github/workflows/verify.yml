on: [pull_request_target]

name: verify

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine
        ports: ["6379:6379"]
        options: --entrypoint redis-server
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: aventumx
          POSTGRES_DB: aventumx_test
          POSTGRES_PASSWORD: password
        ports: ["5432:5432"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
      - name: Ruby gem cache
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Read .nvmrc
        run: echo NVMRC=`cat .nvmrc` >> $GITHUB_ENV
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NVMRC }}
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JS package cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          yarn install --pure-lockfile

      - name: Setup test database
        run: bundle exec rails db:setup
        env:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: aventumx
          PGPASSWORD: password

      - name: Run tests
        run: bundle exec rspec
        env:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: aventumx
          PGPASSWORD: password

      - name: Set Default env
        run: echo "PR_REVIEW=$(echo "DRAFT")" >> $GITHUB_ENV

      - name: Set env
        run: echo "PR_REVIEW=$(echo $(gh api repos/aventumx/qaba/pulls/${{ github.event.pull_request.number }}/reviews --jq '[.[].state] | last'))" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: review
        uses: buildsville/review-summary@v1
        id: summary
        with:
          token: ${{ github.token }}

      - name: Auto-approve Dependabot pull requests
        uses: hmarr/auto-approve-action@v2
        if: (((env.PR_REVIEW != 'APPROVED')) && ((github.event.pull_request.user.login == 'dependabot[bot]') || (github.event.pull_request.user.login == 'dependabot')))
        with:
          github-token: ${{ github.token }}

      - name: automerge
        uses: "pascalgn/automerge-action@v0.14.3"
        if: (steps.summary.outputs.approved > 0) && (${{ env.PR_REVIEW }} == 'APPROVED')
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_SCOPED_GITHUB_TOKEN }}
          MERGE_METHOD: "squash"
          UPDATE_METHOD: "rebase"
